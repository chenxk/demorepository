#分类:OFF  FATAL  ERROR  WARN  INFO  DEBUG  ALL
log4j.rootCategory=INFO,stdout,dc,R

#Console config
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=<%d> <%-5p> <%c> - %m(%F:%M:%L)%n

#org.apache.log4j.ConsoleAppender（控制台），

#org.apache.log4j.FileAppender（文件），

#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），

#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）

#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

#%m 输出代码中指定的消息

#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL

#%r 输出自应用启动到输出该log信息耗费的毫秒数

#%c 输出所属的类目，通常就是所在类的全名

#%t 输出产生该日志事件的线程名

#%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”

#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921

#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。

#[QC]是log信息的开头，可以为任意字符，一般为项目简称。

log4j.appender.dc=org.apache.log4j.DailyRollingFileAppender
log4j.appender.dc.File=dcStore.log
log4j.appender.dc.layout=org.apache.log4j.PatternLayout
log4j.appender.dc.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss,SSS} [%c]-[%p] %m%n
log4j.appender.dc.DatePattern='.'yyyy-MM-dd'.log'


#File config

log4j.appender.R=org.apache.log4j.DailyRollingFileAppender
#\u6BCF\u5929\u8F93\u51FA\u4E00\u4E2A\u65E5\u5FD7\u6587\u4EF6
log4j.appender.R.DatePattern='_'yyyy-MM-dd'.log'
#\u6628\u5929\u7684\u65E5\u5FD7\u6587\u4EF6\u540DSendmsg+\u201C\u6628\u5929\u65E5\u671F\u201D.log
log4j.appender.R.File=logs/Sendmsg.log
#\u65E5\u5FD7\u6587\u4EF6\u7684\u8DEF\u5F84
log4j.appender.R.layout=org.apache.log4j.PatternLayout
#\u65E5\u5FD7\u6587\u4EF6\u8F93\u51FA\u683C\u5F0F
log4j.appender.R.layout.ConversionPattern=%-d{yyyy-MM-dd HH\:mm\:ss,SSS} [%p] %m%n